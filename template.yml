AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A function that validates the structure of the Chat Bot knowledge file.

Parameters:
  SourceBucketName:
    Type: String
    Default: "s3-knowledge-upload"

  OutputBucketName:
    Type: String
    Default: "s3-knowledge-staging"

Resources:
  ValidationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lib/build/distributions/lib.zip
      Handler: aws.HandleValidation
      Runtime: java17
      Description: Java function for validating the chatbot definition.
      MemorySize: 2048
      Timeout: 10
      # Function's execution role
      Policies:
        # Provides write permissions to CloudWatch Logs.
        - AWSLambdaBasicExecutionRole
        # Provides read-only access to AWS Lambda service, AWS Lambda console features, and other related AWS services.
        - AWSLambda_ReadOnlyAccess
        # Provides minimum permissions for a Lambda function to execute while accessing a resource within a VPC - create, describe, delete network interfaces and write permissions to CloudWatch Logs.
        - AWSLambdaVPCAccessExecutionRole

        - S3ReadPolicy:
             BucketName: !Ref SourceBucketName
      Tracing: PassThrough

  TransformationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lib/build/distributions/lib.zip
      Handler: aws.HandleTransformation
      Runtime: java17
      Description: Java function for transformation
      MemorySize: 2048
      Timeout: 10
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSLambdaVPCAccessExecutionRole
        - S3WritePolicy:
            BucketName: !Ref OutputBucketName
        - S3ReadPolicy:
            BucketName: !Ref SourceBucketName
      Tracing: PassThrough

  S3WritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource:
              Fn::Sub: arn:aws:s3:::${OutputBucketName}/*

  StepFunctionsExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "states.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "InvokeLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt ValidationFunction.Arn
                  - !GetAtt TransformationFunction.Arn

  ChatbotDefinitionStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString: !Sub |
        {
          "Comment": "A state machine that validates and then transforms a chatbot file.",
          "StartAt": "Validate",
          "States": {
            "Validate": {
              "Type": "Task",
              "Resource": "${ValidationFunction.Arn}",
              "Next": "Transform"
               "Parameters": {
                 "Validation-BucketName": "$.detail.requestParameters.bucketName",
                 "Validation-KeyName": "$.detail.requestParameters.key"
                }
            },
            "Transform": {
              "Type": "Task",
              "Resource": "${TransformationFunction.Arn}",
              "Parameters": {
                "Transformation-BucketName": "${SourceBucketName}",
                "Transformation-KeyName": "knowledge.json",
                "Transformed-BucketName": "${OutputBucketName}",
                "Transformed-KeyName": "cat.txt"
              },
              "End": true
            }
          }
        }
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn

  StateMachineTriggerRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Trigger state machine when a new file is uploaded to s3-knowledge-upload"
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventName:
            - "PutObject"
          requestParameters:
            bucketName:
              - !Ref SourceBucketName
      State: "ENABLED"
      Targets:
        - Arn: !Ref ChatbotDefinitionStateMachine
          Id: "StateMachineTarget"
          RoleArn: !GetAtt EventBridgeExecutionRole.Arn

  EventBridgeExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "StartStateMachinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "states:StartExecution"
                Resource: !Ref ChatbotDefinitionStateMachine

  TrailBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain

  CloudTrailForS3:
    Type: "AWS::CloudTrail::Trail"
    DependsOn: TrailBucket
    Properties:
      S3BucketName: !Ref TrailBucket
      IsLogging: true
      EventSelectors:
        - DataResources:
            - Type: "AWS::S3::Object"
              Values:
                - !Sub "${SourceBucketName}/"
          IncludeManagementEvents: false
          ReadWriteType: Write

  TrailBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref TrailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "AWSCloudTrailAclCheck"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource: !GetAtt TrailBucket.Arn
          - Sid: "AWSCloudTrailWrite"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:PutObject"
            Resource: !Sub "${TrailBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": "bucket-owner-full-control"

Outputs:
  ValidationLambdaFunctionArn:
    Description: "ARN of the Validation Lambda function"
    Value: !GetAtt ValidationFunction.Arn

  TransformationLambdaFunctionArn:
    Description: "ARN of the Transformation Lambda function"
    Value: !GetAtt TransformationFunction.Arn

  StateMachineArn:
    Description: "ARN of the state machine"
    Value: !Ref ChatbotDefinitionStateMachine



