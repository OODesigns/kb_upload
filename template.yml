AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A function that validates the structure of the Chat Bot knowledge file.

Parameters:
  SourceBucketName:
    Type: String
    Default: "s3-knowledge-upload"

  StagingBucketName:
    Type: String
    Default: "s3-knowledge-staging"
    
  ModelBucketName:
    Type: String
    Default: "s3-knowledge-model"  

Resources:
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref SourceBucketName
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: True

  S3EventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: "Event rule for S3 bucket notifications"
      EventPattern:
        source:
          - "aws.s3"
        detail:
          eventName:
            - "PutObject"
          requestParameters:
            bucketName:
              - !Ref SourceBucketName
      State: "ENABLED"
      Targets:
        - Arn: !Ref ChatBotModelCreation
          Id: "StateMachineTarget"
          RoleArn: !GetAtt StateMachineTriggerRole.Arn
          Input:
            Fn::Sub:
              '{"detail": {"requestParameters": {"bucketName": "${SourceBucketName}", "key": "${!input.detail.requestParameters.key}"}}}'

  StateMachineTriggerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "StateMachineTriggerPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref ChatBotModelCreation


  BucketEventBridgePolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref SourceBucketName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "events.amazonaws.com"
            Action: "sts:AssumeRole"
            Resource: "*"


  ValidationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lib/build/distributions/lib.zip
      Handler: aws.HandleValidation
      Runtime: java17
      Description: Java function for validating the chatbot definition.
      MemorySize: 2048
      Timeout: 10
      # Function's execution role
      Policies:
        # Provides write permissions to CloudWatch Logs.
        - AWSLambdaBasicExecutionRole
        # Provides read-only access to AWS Lambda service, AWS Lambda console features, and other related AWS services.
        - AWSLambda_ReadOnlyAccess
        # Provides minimum permissions for a Lambda function to execute while accessing a resource within a VPC - create, describe, delete network interfaces and write permissions to CloudWatch Logs.
        - AWSLambdaVPCAccessExecutionRole

        - S3ReadPolicy:
             BucketName: !Ref SourceBucketName
      Tracing: PassThrough

  TransformationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lib/build/distributions/lib.zip
      Handler: aws.HandleTransformation
      Runtime: java17
      Description: Java function for transformation
      MemorySize: 2048
      Timeout: 10
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSLambdaVPCAccessExecutionRole
        - S3WritePolicy:
            BucketName: !Ref StagingBucketName
        - S3ReadPolicy:
            BucketName: !Ref SourceBucketName
      Tracing: PassThrough

  S3StagingWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource:
              Fn::Sub: arn:aws:s3:::${StagingBucketName}/*

  ModelFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lib/build/distributions/lib.zip
      Handler: aws.HandleModelCreation
      Runtime: java17
      Description: Java function for Model Creation
      MemorySize: 2048
      Timeout: 10
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSLambdaVPCAccessExecutionRole
        - S3WritePolicy:
            BucketName: !Ref ModelBucketName
        - S3ReadPolicy:
            BucketName: !Ref StagingBucketName
      Tracing: PassThrough

  S3ModelWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource:
              Fn::Sub: arn:aws:s3:::${ModelBucketName}/*

  ChatBotModelCreation:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub: |-
          {
            "Comment": "A state machine that validates, transforms and creates a chatbot cat model.",
            "StartAt": "Validation",
            "States": {
              "Validation": {
                "Type": "Task",
                "Resource": "${ValidationFunction.Arn}",
                "Next": "Transformation"
                "Parameters": {
                  "Validation-BucketName": "${SourceBucketName}",
                  "Validation-KeyName": "knowledge.json",
                }          
              },
              "Transformation": {
                "Type": "Task",
                "Resource": "${TransformationFunction.Arn}",
                "Next": "ModelCreation"
                "Parameters": {
                  "Transformation-BucketName": "${SourceBucketName}",
                  "Transformation-KeyName": "knowledge.json",
                  "Transformed-BucketName": "${StagingBucketName}",
                  "Transformed-KeyName": "cat.txt"
                },          
              },
              "ModelCreation": {
                "Type": "Task",
                "Resource": "${ModelFunction.Arn}",
                "End": true
                "Parameters": {
                  "ModelInput-BucketName": "${StagingBucketName}",
                  "ModelInput-KeyName": "cat.txt",
                  "Model-BucketName": "${ModelBucketName}",
                  "Model-KeyName": "cat.bin"
                },          
              }
            }
          }
      RoleArn:
        Fn::GetAtt: [ StateMachineExecutionRole, Arn ]

  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ValidationFunction.Arn
                  - !GetAtt TransformationFunction.Arn
                  - !GetAtt ModelFunction.Arn


Outputs:
  ValidationLambdaFunctionArn:
    Description: "ARN of the Validation Lambda function"
    Value: !GetAtt ValidationFunction.Arn

  TransformationLambdaFunctionArn:
    Description: "ARN of the Transformation Lambda function"
    Value: !GetAtt TransformationFunction.Arn

  ModelFunctionLambdaFunctionArn:
    Description: "ARN of the Model Lambda function"
    Value: !GetAtt ModelFunction.Arn

  StateMachineArn:
    Description: "ARN of the ChatBot Model Creation"
    Value: !GetAtt ChatBotModelCreation.Arn




