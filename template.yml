AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A function that validates the structure of the Chat Bot knowledge file.

Parameters:
  SourceBucketName:
    Type: String
    Default: "s3-knowledge-upload"

  StagingBucketName:
    Type: String
    Default: "s3-knowledge-staging"
    
  ModelBucketName:
    Type: String
    Default: "s3-knowledge-model"

  EmailSubscriptionEndpoint:
    Type: String
    Description: "Email address for SNS subscription"
    Default: "elegant.wheel5076@fastmail.com"

Resources:
  S3EventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: S3ModelCreateTrigger
      Description: "Event rule for S3 bucket notifications"
      EventBusName: default
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Ref SourceBucketName
      Targets:
        - Arn: !Ref ChatBotModelCreation
          Id: "StateMachineTarget"
          RoleArn: !GetAtt StateMachineTriggerRole.Arn

  StateMachineTriggerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "StateMachineTriggerPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref ChatBotModelCreation

  ValidationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      AutoPublishAlias: SnapStart
      CodeUri: lib/build/distributions/lib.zip
      Handler: aws.HandleValidation
      Runtime: java17
      Description: Java function for validating the chatbot definition.
      MemorySize: 2048
      Timeout: 10
      # Function's execution role
      Policies:
        # Provides write permissions to CloudWatch Logs.
        - AWSLambdaBasicExecutionRole
        # Provides read-only access to AWS Lambda service, AWS Lambda console features, and other related AWS services.
        - AWSLambda_ReadOnlyAccess
        # Provides minimum permissions for a Lambda function to execute while accessing a resource within a VPC - create, describe, delete network interfaces and write permissions to CloudWatch Logs.
        - AWSLambdaVPCAccessExecutionRole

        - S3ReadPolicy:
             BucketName: !Ref SourceBucketName
      Tracing: PassThrough
      SnapStart:
        ApplyOn: PublishedVersions

  TransformationFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: SnapStart
      CodeUri: lib/build/distributions/lib.zip
      Handler: aws.HandleTransformation
      Runtime: java17
      Description: Java function for transformation
      MemorySize: 2048
      Timeout: 10
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSLambdaVPCAccessExecutionRole
        - S3WritePolicy:
            BucketName: !Ref StagingBucketName
        - S3ReadPolicy:
            BucketName: !Ref SourceBucketName
      Tracing: PassThrough
      SnapStart:
        ApplyOn: PublishedVersions

  S3StagingWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource:
              Fn::Sub: arn:aws:s3:::${StagingBucketName}/*

  ModelFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: SnapStart
      CodeUri: lib/build/distributions/lib.zip
      Handler: aws.HandleModelCreation
      Runtime: java17
      Description: Java function for Model Creation
      MemorySize: 2048
      Timeout: 10
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSLambdaVPCAccessExecutionRole
        - S3WritePolicy:
            BucketName: !Ref ModelBucketName
        - S3ReadPolicy:
            BucketName: !Ref StagingBucketName
      Tracing: PassThrough
      SnapStart:
        ApplyOn: PublishedVersions

  S3ModelWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource:
              Fn::Sub: arn:aws:s3:::${ModelBucketName}/*

  ModelStateTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "model-state"

  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref ModelStateTopic
      Endpoint: !Ref EmailSubscriptionEndpoint

  ChatBotModelCreation:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub: |-
          {
          	"Comment": "A state machine that validates, transforms and creates a chatbot cat model.",
          	"StartAt": "Validation",
          	"States": {
          		"Validation": {
          			"Type": "Task",
          			"Resource": "${ValidationFunction.Arn}",
          			"Next": "Transformation",
          			"Parameters": {
          				"Validation-BucketName": "${SourceBucketName}",
          				"Validation-KeyName": "knowledge.json"
          			},
                   "Catch": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "ResultPath": "$.ErrorInfo",
                        "Next": "ExceptionTransformer"
                      }
                    ]        
          		},
          		"Transformation": {
          			"Type": "Task",
          			"Resource": "${TransformationFunction.Arn}",
          			"Next": "ModelCreation",
          			"Parameters": {
          				"Transformation-BucketName": "${SourceBucketName}",
          				"Transformation-KeyName": "knowledge.json",
          				"Transformed-BucketName": "${StagingBucketName}",
          				"Transformed-KeyName": "cat.txt"
                     },
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "ResultPath": "$.ErrorInfo",
                        "Next": "ExceptionTransformer"
                      }
                    ]
                },
          		"ModelCreation": {
          			"Type": "Task",
          			"Resource": "${ModelFunction.Arn}",
          			"Next": "NotifySuccess",
          			"Parameters": {
          				"ModelInput-BucketName": "${StagingBucketName}",
          				"ModelInput-KeyName": "cat.txt",
          				"Model-BucketName": "${ModelBucketName}",
          				"Model-KeyName": "cat.bin",
                        "Assistant-BucketName":"${StagingBucketName}",
                        "Assistant-KeyName":"knowledge.json"
                   },
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "ResultPath": "$.ErrorInfo",
                      "Next": "ExceptionTransformer"
                    }
                  ]          
          		},    
                "ExceptionTransformer": {
                  "Type": "Pass",
                  "Next": "NotifyFailure",
                  "Parameters": {
                    "Error.$": "States.StringToJson($.ErrorInfo.Cause)"
                  }
               },
               "NotifyFailure": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sns:publish",
                  "Parameters": {
                    "Subject": "[Failure]: Model was not successfully created",
                    "TopicArn": "arn:aws:sns:eu-north-1:799930001464:model-state",
                    "Message": {
                      "Message": "Model was not successfully created",
                      "ErrorMessage.$": "$.Error.errorMessage"
                      }
                  },
                  "Next": "Fail"
                },
                "Fail": {
                  "Type": "Fail"
                },        
                "NotifySuccess": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sns:publish",
                  "Parameters": {
                    "Subject": "[Success]: Model was successfully created",
                    "TopicArn": "arn:aws:sns:eu-north-1:799930001464:model-state",
                    "Message": {
                      "Message": "Model was successfully created"
                    }
                  },
                  "Next": "Success"
                },
                "Success": {
                  "Type": "Succeed"
                }
          	}
          }
      RoleArn:
        Fn::GetAtt: [ StateMachineExecutionRole, Arn ]

  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ModelStatePublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref ModelStateTopic
        - PolicyName: InvokeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ValidationFunction.Arn
                  - !GetAtt TransformationFunction.Arn
                  - !GetAtt ModelFunction.Arn

Outputs:
  ValidationLambdaFunctionArn:
    Description: "ARN of the Validation Lambda function"
    Value: !GetAtt ValidationFunction.Arn

  TransformationLambdaFunctionArn:
    Description: "ARN of the Transformation Lambda function"
    Value: !GetAtt TransformationFunction.Arn

  ModelFunctionLambdaFunctionArn:
    Description: "ARN of the Model Lambda function"
    Value: !GetAtt ModelFunction.Arn

  StateMachineArn:
    Description: "ARN of the ChatBot Model Creation"
    Value: !GetAtt ChatBotModelCreation.Arn




